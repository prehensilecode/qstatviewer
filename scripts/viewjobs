#!/usr/bin/env python
"""
Displays information about one or more users' jobs
"""

# Author: David Chin <dwchin@acm.org>
 
# Copyright 2013 Wake Forest University

import sys, os, re
import datetime
import getpass
from optparse import OptionParser

import qstatviewer
from qstatviewer.Memory import Memory

def jobs_on_nodes(qv):
    print('{0}:'.format(qv.pbsquery.server))
    print("{j:<12} {u:<8} {g:>13} {q:<9} {jn:^24} {f:^5.3} NODES ".format(j="JOB ID", u="USERNAME", 
        g="GROUP", q="QUEUE", jn="JOBNAME", f="NET"));
    print("------------------------------------------------------------------------------------------------------------------")
    jobfabric = ''
    formatstr = "{ji:<12} {job.owner:<8.8} {job.group:>13.13} {job.queue:<9.9} {job.name:^24.24} {fab:^5.3}"
    tmpset = set()
    for id in sorted(qv.jobs.keys()):
        job = qv.jobs[id]
        if job.job_state == 'R':
            #print "{0:<11.11}".format(id.split('.')[0]), "{0:>8.8}".format(job.owner), "{0:>13.13}".format(job.egroup), 
            nhosts = len(job.hosts)
            hostlist = list(job.hosts)
            job_fabric = qv.nodes[hostlist[0]].fabric
            if nhosts > 1:
                for n in range(1,nhosts):
                    if qv.nodes[hostlist[n]].fabric != job_fabric:
                        job_fabric = 'mix'
                        break
                    else:
                        continue
            print formatstr.format(ji=id.split('.')[0], fab=job_fabric, job=job),
            for h in sorted(job.exec_host):
                tmpset.add(h.split('/')[0])
            for h in tmpset:
                print h,
            print ''
            tmpset.clear()

    print''
    tmpset.clear()

def mem_stats(mem_req_list):
    # input is a list of Memory, which has qty's in kiB
    retval = {}

    m = [mem.qty for mem in mem_req_list]

    retval['min'] = Memory(min(m))
    retval['max'] = Memory(max(m))
    retval['mean'] = Memory(sum(m)/len(m))

    return retval


def total_seconds(td):
    # td is a datetime.timedelta object; drop the microseconds
    return (td.days * 86400 + td.seconds)


def viewjobs(qv, user=None, all=False, group=None, state=None, fabric=None, queue=None):
    print "FOOBAR: queue = ", queue
    n_jobs_running = 0
    n_jobs_queued = 0
    nodes_req = []
    ncpus_req = []
    occupied_hosts = set()
    total_ncpus_used = 0
    total_cput_usage = datetime.timedelta()
    total_mem_usage = Memory()
    vmem_req = []
    walltimes_req = []
    longest_walltime = datetime.timedelta(seconds=0)
    longest_wait = datetime.timedelta(seconds=0)

    print('{0}:'.format(qv.pbsquery.server))
    print("{j:<12} {u:<8} {g:>13} {q:<9} {jn:^24} {s:>6} {nd:>3} {t:>5} {f:^3.3} {mreq:>11} {muse:>11} {treq:>16}  S {tel:>16}  {ctime:>24}".format(j="JOB ID", u="USERNAME", 
        g="GROUP", q="QUEUE", jn="JOBNAME", s="SessID", nd="NDS", t="TSK", f='NET', mreq="REQ VMEM", muse="USE MEM", treq="REQ WALLTIME", tel="ELAP WALLTIME", ctime="CREATED ON/WAITING FOR"));
    print("----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")

    # print_this_p also tells us when a job matches criteria, and so
    # the job's info should be figured into the summary stats
    print_this_p = False

    match_user_p = False
    match_group_p = False
    match_state_p = False
    match_fabric_p = False
    match_queue_p = False

    dayspat = re.compile('\ days?,')

    muse = 0  # amount of memory used
    for jobid, j in sorted(qv.jobs.iteritems()):
        nodect = j.resource_list['nodect']
        ntasks = j.resource_list['ncpus']
        vmem   = j.resource_list['vmem']
        wallt_str = qstatviewer.timedeltastr(j.resource_list['walltime'])

        if user:
            if j.owner == user:
                print_this_p = True
        elif group:
            if j.group == group:
                print_this_p = True
        elif state:
            state = state.upper()
            if state == j.state:
                print_this_p = True
        elif fabric:
            if fabric.lower() == 'eth':
                fabric = 'ethernet'
            elif fabric.lower() == 'inf':
                fabric = 'infiniband'
            else:
                fabric = fabric.lower()


            if j.state == 'R':
                nhosts = len(j.hosts)
                hostlist = list(j.hosts)
                for n in range(0,nhosts):
                    if qv.nodes[hostlist[n]].fabric == fabric:
                        print_this_p = True
                        break
        elif queue:
            if j.queue == queue:
                print_this_p = True
        elif all:
            print_this_p = True
        else:
            print_this_p = True

        #
        # accumulate stats
        #
        if print_this_p:
            nodes_req.append(nodect)
            ncpus_req.append(ntasks)

            vmem_req.append(vmem)

            walltimes_req.append(j.resource_list['walltime'])

        if j.state == 'R':
            if not j.resources_used:
                # for some reason, some running jobs have no resources_used element
                elapse = 'n/a'
                job_fabric = 'n/a'
                muse = Memory()

            if print_this_p:
                n_jobs_running += 1

                if j.resources_used:
                    cur_wt = j.resources_used['walltime']
                    if cur_wt > longest_walltime:
                        longest_walltime = cur_wt
                    elapse = qstatviewer.timedeltastr(j.resources_used['walltime'])
                    occupied_hosts = occupied_hosts.union(j.hosts)
                    nhosts = len(j.hosts)
                    hostlist = list(j.hosts)
                    job_fabric = qv.nodes[hostlist[0]].fabric
                    muse = j.resources_used['vmem']
                    if nhosts > 1:
                        for n in range(1,nhosts):
                            if qv.nodes[hostlist[n]].fabric != job_fabric:
                                job_fabric = 'mix'
                                break
                            else:
                                continue

                    total_ncpus_used += j.resource_list['ncpus']
                    total_cput_usage += j.resources_used['cput']
                    total_mem_usage += j.resources_used['vmem']
        else:
            if print_this_p:
                n_jobs_queued += 1
                elapse = 'n/a'
                job_fabric = 'n/a'
                wait = datetime.datetime.now() - j.ctime
                if wait > longest_wait:
                    longest_wait = wait

        #formatstr = "{ji:<11} {job.owner:<8.8} {job.group:>13.13} {job.queue:<8.8} {job.name:^24.24} {job.session_id:>6} {nodect:>3d} {ntasks:>5d} {fab:^3.3} {mem:>11.11} {wallt:>16}  {job.job_state} {elapse:>16}  {job.ctime}"

        waittime_list = []
        if j.state == 'Q':
            now = datetime.datetime.now()
            waiting = now - j.ctime
            waiting = datetime.timedelta(days=waiting.days, seconds=waiting.seconds)  # drop the microseconds
            waiting = ' '.join(['Wait:', str(waiting)])
            waittime_list.append(waiting)
            formatstr = "{ji:<12} {job.owner:<8.8} {job.group:>13.13} {job.queue:<9.9} {job.name:^24.24} {job.session_id:>6} {nodect:>3d} {ntasks:>5d} {fab:^3.3} {vmem:>11.11} {muse:>11.11} {wallt:>16}  {job.job_state} {elapse:>16}  {waiting:>24}"
            if print_this_p:
                print(formatstr.format(ji=jobid.split('.')[0], job=j, nodect=nodect, ntasks=ntasks, fab=job_fabric, vmem=vmem.pretty_print(), muse='n/a', wallt=wallt_str, elapse=elapse, waiting=waiting))
                print_this_p = False
        elif j.state == 'R':
            formatstr = "{ji:<12} {job.owner:<8.8} {job.group:>13.13} {job.queue:<9.9} {job.name:^24.24} {job.session_id:>6} {nodect:>3d} {ntasks:>5d} {fab:^3.3} {vmem:>11.11} {muse:>11.11} {wallt:>16}  {job.job_state} {elapse:>16}  {ctime:>24}"
            if print_this_p:
                print(formatstr.format(ji=jobid.split('.')[0], job=j, nodect=nodect, ntasks=ntasks, fab=job_fabric, vmem=vmem.pretty_print(), muse=muse.pretty_print(), wallt=wallt_str, elapse=elapse, ctime=str(j.ctime)))
                print_this_p = False


        #if print_this_p:
        #    print(formatstr.format(ji=jobid.split('.')[0], job=j, nodect=nodect, ntasks=ntasks, fab=job_fabric, mem=mem.pretty_print(), wallt=wallt_str, elapse=elapse))
        #    print_this_p = False

    #
    # summary
    #
    criterion = ''
    if group:
        criterion = 'GROUP {0}'.format(group)
    elif state:
        if state == 'R':
            criterion = 'STATE Running'
        elif state == 'Q':
            criterion = 'STATE Queued'
        else:
            criterion = 'STATE unknown'
    elif fabric:
        criterion = 'FABRIC {0}'.format(fabric)

    if criterion:
        print("\nSUMMARY JOB STATISTICS FOR {0}".format(criterion))
    else:
        print("\nSUMMARY JOB STATISTICS")
        
    if not state == 'Q':
        print("No. of jobs running: {nr:>4d}".format(nr=n_jobs_running))
    if not state == 'R':
        print(" No. of jobs queued: {nq:>4d}".format(nq=n_jobs_queued))

    if not state:
        print("  Total no. of jobs: {nt:>4d}".format(nt=(n_jobs_running + n_jobs_queued)))

    if n_jobs_running > 0:
        print("Longest running job: {t:>17}".format(t=longest_walltime))

    if n_jobs_queued > 0:
        longest_wait = datetime.timedelta(days=longest_wait.days, seconds=longest_wait.seconds)
        print("Longest waiting time in queue: {t:>17}".format(t=longest_wait))

    tot_nodes = 0
    tot_cpus = 0

    if fabric:
        for name,node in qv.nodes.iteritems():
            if node.fabric == fabric:
                tot_nodes += 1
                tot_cpus += node.ncpus
    else:
        tot_nodes = len(qv.nodes)
        for name,node in qv.nodes.iteritems():
            tot_cpus += node.ncpus

    print("")
    n_nodes = len(occupied_hosts)
    if fabric:
        print("Total no. of nodes occupied: {n:>4d} / {tn:>4d} [{pct:>.2f}%] ({f} nodes)".format(n=n_nodes, tn=tot_nodes, pct=(float(n_nodes)/tot_nodes*100.), f=fabric))
        print(" Total no. of CPUs occupied: {c:>4d} / {tc:>4d} [{pct:>.2f}%] ({f} nodes)".format(c=total_ncpus_used, tc=tot_cpus, pct=(float(total_ncpus_used)/tot_cpus*100.), f=fabric))
    else:
        print("Total no. of nodes occupied: {n:>4d} / {tn:>4d} [{pct:>.2f}%]".format(n=n_nodes, tn=tot_nodes, pct=(float(n_nodes)/tot_nodes*100.)))
        print(" Total no. of CPUs occupied: {c:>4d} / {tc:>4d} [{pct:>.2f}%]".format(c=total_ncpus_used, tc=tot_cpus, pct=(float(total_ncpus_used)/tot_cpus*100.)))
    print("    Total CPU time consumed: {t:>14}".format(t=total_cput_usage))
    print("      Total memory consumed: {m:>11}".format(m=total_mem_usage.pretty_print()))

    print("")

    if vmem_req:
        ms = mem_stats(vmem_req)
        print("Min. memory request: {m:>11.11}                  Min. no. of nodes: {n:>2d}".format(m=ms['min'].pretty_print(),n=min(nodes_req)))
        print("Max. memory request: {m:>11.11}                  Max. no. of nodes: {n:>2d}".format(m=ms['max'].pretty_print(),n=max(nodes_req)))
        print("Mean memory request: {m:>11.11}                  Mean no. of nodes: {n:>5.2f}".format(m=ms['mean'].pretty_print(),n=(sum(nodes_req)/float(len(nodes_req)))))
    
        print("")

    # mean walltime
    wtreq_mean = 0.
    if len(walltimes_req) > 0:
        for wt in walltimes_req:
            wtreq_mean += (wt.days * 86400. + wt.seconds)
        wtreq_mean /= len(walltimes_req)
        wtreq_mean = datetime.timedelta(seconds=int(wtreq_mean))  # drop fractional seconds

    # mean ncpus
    ncpus_mean = 0.
    if len(ncpus_req) > 0:
        for nc in ncpus_req:
            ncpus_mean += nc
        ncpus_mean /= len(ncpus_req)

    if walltimes_req and ncpus_req:
        print("Min. walltime request: {w:>19}        Min. no. of CPUs: {n:>3d}".format(w=min(walltimes_req), n=min(ncpus_req)))
        print("Max. walltime request: {w:>19}        Max. no. of CPUs: {n:>3d}".format(w=max(walltimes_req), n=max(ncpus_req)))
        print("Mean walltime request: {w:>19}        Mean no. of CPUs: {n:>6.2f}".format(w=wtreq_mean, n=ncpus_mean))
    elif walltimes_req:
        print("Min. walltime request: {w:>19}".format(w=min(walltimes_req)))
        print("Max. walltime request: {w:>19}".format(w=max(walltimes_req)))
        print("Mean walltime request: {w:>19}".format(w=wtreq_mean))


def main(user=None, all=False, group=None, state=None, nodes=False, fabric=None, queue=None):
    qv = qstatviewer.QstatViewer()

    if nodes:
        jobs_on_nodes(qv)
    else:
        viewjobs(qv=qv, user=user, all=all, group=group, state=state, fabric=fabric, queue=queue)

if __name__ == '__main__':
    usage = """usage: %prog [options] [USERNAME]
        If USERNAME is given, only jobs belonging to USERNAME are displayed. 
        If no USERNAME is given, jobs belonging to the current user are displayed."""
    parser = OptionParser(usage)
    parser.add_option('-a', '--all', action='store_true', dest='all', default=False,
                      help='displays all jobs from all users')
    parser.add_option('-g', '--group', dest='group', type='str', 
                      help='displays jobs for users in GROUP')
    parser.add_option('-s', '--state', dest='state', type='str',
                      help='displays jobs with state STATE (q = queued, r = running, e = exiting)')
    parser.add_option('-n', '--nodes', action='store_true', dest='nodes', 
                      default=False, help='displays nodes occupied by job')
    parser.add_option('-f', '--fabric', dest='fabric', type='str',
                      help='displays jobs running on network FABRIC type (inf, infiniband, eth, ethernet)')
    parser.add_option('-q', '--queue', dest='queue', type='str',
                      help='displays only jobs in queue QUEUE')
    (options, args) = parser.parse_args()

    print "FOOBAR: options.queue = ", options.queue

    # if no username given, and no options specified, then view user's own jobs
    if not args and (not options.all and not options.group and not options.state and not options.nodes and not options.fabric and not options.queue):
        main(user=getpass.getuser())
    elif args:
        main(user=args[0])
    else:
        main(user=None, all=options.all, group=options.group, state=options.state, nodes=options.nodes, fabric=options.fabric, queue=options.queue)

