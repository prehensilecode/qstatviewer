#!/usr/bin/env python
"""
Prints out information on jobs on nodes matching given criteria
"""

# Author: David Chin <dwchin@acm.org>

# Copyright 2013 Wake Forest University

import sys, os
import re
import datetime
import qstatviewer as qv
from optparse import OptionParser

def output_stuff(nodelist):
    print('     NODE   JOB IDS')
    print('=========   =======')
    for node in sorted(nodelist):
        unique_jobs = sorted(q.nodes[node].unique_jobs)
        jobstr = ''
        for jobid in unique_jobs:
            if q.jobs[jobid].state == 'R':
                jobstr = ' '.join([jobstr, jobid.split('.')[0]])
        print('{n:>9.9} : {j}'.format(n=q.nodes[node].name, j=jobstr))
        print('')

        if unique_jobs:
            formatstr = "{space:>16}{ji:>11} {o:<8} {n:>4} {vm:>10} {wt:>17}"
            print(formatstr.format(space='', ji='JOBID', o='USERNAME', n='NCPU', vm='MEM USED', wt='WALLTIME'))
            for jobid in unique_jobs:
                job = q.jobs[jobid]
                if job.state == 'R':
                    ji = jobid.split('.')[0]

                    wt = job.resources_used['walltime']

                    #vm = qv.convert_memory(job.resources_used['vmem'])
                    #vmstr = "{v:>5.2f} {u}".format(v=vm['qty'], u=vm['units'])
                    vmstr = job.resources_used['vmem'].pretty_print()

                    print(formatstr.format(space='', ji=ji, o=job.owner, n=job.ncpus, vm=vmstr, wt=wt))
        print('')

def main(node=None, clan=None, fabric=None, property=None):
    global q

    nodelist = []
    clanlist = []
    fabriclist = []
    propertylist = []

    if node:
        nodelist = node.split(',')

    if clan:
        clanlist = clan.split(',')

    if fabric:
        fabriclist = fabric.split(',')
    
    if property:
        propertylist = property.split(',')

    shortclanpat = re.compile(r'^\d{2}$')
    shortgridpat = re.compile(r'^g(\d{2})$')
    bc_clanpat = re.compile(r'^bc(\d{2})$')
    bcg_clanpat = re.compile(r'^bcg(\d{2})$')

    if nodelist:
        pass
    elif clanlist:
        nodelist = []
        for clan in clanlist:
            for nodename,node in q.nodes.iteritems():
                if shortclanpat.match(clan):
                    clan = ''.join(['clan', clan])
                elif shortgridpat.match(clan):
                    clan = ''.join(['grid', shortgridpat.match(clan).group(1)])
                elif bc_clanpat.match(clan):
                    clan = ''.join(['clan', bc_clanpat.match(clan).group(1)])
                elif bcg_clanpat.match(clan):
                    clan = ''.join(['grid', bcg_clanpat.match(clan).group(1)])

                if node.clan == clan:
                    nodelist.append(nodename)
    elif fabriclist:
        nodelist = []
        for fabric in fabriclist:
            for nodename,node in q.nodes.iteritems():
                if fabric == 'inf':
                    fabric = 'infiniband'
                elif fabric == 'eth':
                    fabric = 'ethernet'

                if node.fabric == fabric:
                    nodelist.append(nodename)
    elif propertylist:
        nodelist = []
        for property in propertylist:
            for nodename,node in q.nodes.iteritems():
                if property in node.properties:
                    nodelist.append(nodename)
    else:
        print('BYE!')
        sys.exit(1)

    output_stuff(nodelist)


if __name__ == '__main__':
    usage = """usage: %prog [options]
    Show brief information about jobs running on nodes specified by the given options
    """

    parser = OptionParser(usage)
    parser.add_option('-n', '--node', type='str', dest='node', metavar='NODE',
                      help='list job info for NODE; NODE may be a comma-separated list')
    parser.add_option('-c', '--clan', type='str', dest='clan', metavar='CLAN',
                      help='list job info for all nodes in CLAN (e.g. clan01, 01, grid03, g03); CLAN may be a comma-separated list')
    parser.add_option('-f', '--fabric', type='str', dest='fabric', metavar='FABRIC',
                      help='list job info for all nodes with network FABRIC (eth, ethernet, inf, infiniband); FABRIC may be a comma-separated list')
    parser.add_option('-p', '--property', type='str', dest='property', metavar='PROPERTY',
                      help='list job info for all nodes with PROPERTY; PROPERTY may be a comma-separated list')
    (options, args) = parser.parse_args()

    if not (options.node or options.clan or options.fabric or options.property):
        parser.print_help()
        sys.exit(1)

    q = qv.QstatViewer()

    main(node=options.node, clan=options.clan, fabric=options.fabric, property=options.property)

